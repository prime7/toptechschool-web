generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  phone           String?
  profession      String?
  emailVerified   DateTime?
  isEmailVerified Boolean        @default(false)
  image           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  summary         String?
  highlights      String[]
  github          String?
  website         String?
  linkedin        String?
  location        String?
  accounts        Account[]
  resumes         Resume[]
  sessions        Session[]
  work            Work[]
  education       Education[]
  projects        Project[]
  practiceTests   PracticeTest[]
  ai              AI[]
}

model Work {
  id           String       @id @default(cuid())
  company      String
  position     String?
  location     LocationType @default(REMOTE)
  startDate    DateTime
  endDate      DateTime?
  description  String?      @db.Text
  points       String[]
  displayOrder Int          @default(0)
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id           String    @id @default(cuid())
  institution  String
  degree       Degree
  startDate    DateTime
  endDate      DateTime?
  description  String?   @db.Text
  points       String[]
  displayOrder Int       @default(0)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String   @id @default(cuid())
  name         String
  url          String?
  description  String?  @db.Text
  points       String[]
  displayOrder Int      @default(0)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String        @id @default(cuid())
  userId     String
  filename   String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  content    Json?
  parsed     ParsingStatus @default(NOT_STARTED)
  fileKey    String
  analysis   Json?
  profession String?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobReviews JobReview[]
}

model JobReview {
  id              String   @id @default(cuid())
  resumeId        String?
  userId          String
  createdAt       DateTime @default(now())
  matchScore      Int
  missingKeywords String[]
  suggestions     String[]
  resume          Resume?  @relation(fields: [resumeId], references: [id])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model TemplateRequests {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model PracticeTest {
  id            String   @id @default(cuid())
  userId        String
  practiceSetId String
  items         Json[]
  totalTime     Int
  createdAt     DateTime @default(now())
  aiAnalysis    Json?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AI {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         String
  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Float
  requestType      String
  time             Float?
  userId           String
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestType])
  @@index([provider])
}

enum ParsingStatus {
  NOT_STARTED
  STARTED
  PARSED
  ERROR
}

enum Degree {
  ASSOCIATE
  BACHELORS
  MASTERS
  PHD
  MBA
  DIPLOMA
  CERTIFICATE
  HIGH_SCHOOL
  BOOTCAMP
  SELF_TAUGHT
  OTHER
}

enum LocationType {
  REMOTE
  HYBRID
  ON_SITE
}

enum Visibility {
  PUBLIC
  PRIVATE
  CONNECTIONS_ONLY
}
