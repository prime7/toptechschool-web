generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  isEmailVerified Boolean          @default(false)
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String?
  bio             String?
  location        String?
  accounts        Account[]
  resumes         Resume[]
  sessions        Session[]
  socialLinks     SocialLink[]
  workExperience  WorkExperience[]
  education       Education[]
  skills          Skill[]
  practiceTests   PracticeTest[]
  ai              AI[]
}

model SocialLink {
  id           String   @id @default(cuid())
  platform     Platform
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayOrder Int      @default(0)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id             String         @id @default(cuid())
  company        String
  position       String
  location       String
  startDate      DateTime
  endDate        DateTime?
  description    String?        @db.Text
  displayOrder   Int            @default(0)
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  employmentType EmploymentType @default(FULL_TIME)
}

model Education {
  id           String    @id @default(cuid())
  institution  String
  degree       Degree
  startDate    DateTime
  endDate      DateTime?
  description  String?   @db.Text
  displayOrder Int       @default(0)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id         String        @id @default(cuid())
  userId     String
  filename   String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  content    Json?
  parsed     ParsingStatus @default(NOT_STARTED)
  fileKey    String
  analysis   Json?
  jobRole    JobRole?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobReviews JobReview[]
}

model JobReview {
  id              String   @id @default(cuid())
  resumeId        String?
  userId          String
  createdAt       DateTime @default(now())
  matchScore      Int
  missingKeywords String[]
  suggestions     String[]
  resume          Resume?  @relation(fields: [resumeId], references: [id])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model TemplateRequests {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model PracticeTest {
  id            String   @id @default(cuid())
  userId        String
  practiceSetId String
  items         Json[]
  totalTime     Int
  createdAt     DateTime @default(now())
  aiAnalysis    Json?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AI {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         String
  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Float
  requestType      String
  time             Float?
  userId           String
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestType])
  @@index([provider])
}

enum ParsingStatus {
  NOT_STARTED
  STARTED
  PARSED
  ERROR
}

enum JobRole {
  SOFTWARE_ENGINEER
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULLSTACK_DEVELOPER
  DEVOPS_ENGINEER
  QA_ENGINEER
  DATA_SCIENTIST
  DATA_ENGINEER
  MACHINE_LEARNING_ENGINEER
  PRODUCT_MANAGER
  PROJECT_MANAGER
  SCRUM_MASTER
  UI_UX_DESIGNER
  SYSTEM_ADMINISTRATOR
  SECURITY_ENGINEER
  DATABASE_ADMINISTRATOR
}

enum Platform {
  LINKEDIN
  GITHUB
  X
  FACEBOOK
  YOUTUBE
  STACKOVERFLOW
  PERSONAL_WEBSITE
  PORTFOLIO
}

enum Degree {
  ASSOCIATE
  BACHELORS
  MASTERS
  PHD
  MBA
  DIPLOMA
  CERTIFICATE
  HIGH_SCHOOL
  BOOTCAMP
  SELF_TAUGHT
  OTHER
}

enum LocationType {
  REMOTE
  HYBRID
  ON_SITE
}

enum Visibility {
  PUBLIC
  PRIVATE
  CONNECTIONS_ONLY
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  APPRENTICESHIP
  VOLUNTEER
  SELF_EMPLOYED
}
