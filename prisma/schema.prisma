generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  resumes       Resume[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id        String        @id @default(cuid())
  userId    String
  filename  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  content   Json?
  parsed    ParsingStatus @default(NOT_STARTED)
  fileKey   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobRole   JobRole?

  content  Json?
  analysis Json?

  parsed ParsingStatus @default(NOT_STARTED)
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model TemplateRequests {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

enum ParsingStatus {
  NOT_STARTED
  STARTED
  PARSED
  ERROR
}

enum JobRole {
  SOFTWARE_ENGINEER
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULLSTACK_DEVELOPER
  DEVOPS_ENGINEER
  QA_ENGINEER
  DATA_SCIENTIST
  DATA_ENGINEER
  MACHINE_LEARNING_ENGINEER
  PRODUCT_MANAGER
  PROJECT_MANAGER
  SCRUM_MASTER
  UI_UX_DESIGNER
  SYSTEM_ADMINISTRATOR
  SECURITY_ENGINEER
  DATABASE_ADMINISTRATOR
}
